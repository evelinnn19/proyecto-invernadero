package ControladorCentral;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.rmi.RemoteException;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.logging.Level;
import java.util.logging.Logger;

public class CoordinadorBomba {
    private int valvulasRiegoActivas = 0;
    private boolean fertirrigando = false;
    private boolean riegoGeneral = false;
    private PrintWriter outGeneral; // para enviar a EV2
    private PrintWriter outferti;   // para enviar a EV1

    private volatile Impresor imp;
    private final ReentrantLock lock = new ReentrantLock();
    private final Condition puedeRegar = lock.newCondition();
    private final Condition puedeFertirregar = lock.newCondition();

    private volatile RMIClienteBomba rmiCliente;

    public Impresor getImp() {
        return imp;
    }

    public void setImp(Impresor imp) {
        this.imp = imp;
        this.imp.setFertirrigacion(fertirrigando);
        this.imp.setRiegoGeneral(riegoGeneral);
    }

    public void setRmiCliente(RMIClienteBomba cliente){
        this.rmiCliente = cliente;
    }

    // Inicia un riego (si se esta fertirrigando, lo bloquea)
    public void iniciarRiego(int parcela) throws InterruptedException {
        boolean needOpenGeneral = false;

        lock.lock();
        try {
            // Esperar si hay fertirrigaci√≥n activa
            while (fertirrigando) {
                System.out.println("‚è≥ Parcela " + parcela + " esperando (fertirrigaci√≥n activa)");
                puedeRegar.await();
            }

            valvulasRiegoActivas++;
            System.out.println("‚úÖ Se inici√≥ el riego en parcela " + parcela);
            System.out.println("üìä " + valvulasRiegoActivas + " v√°lvula(s) de riego activas");

            // Verificar si necesitamos abrir la v√°lvula general
            if (valvulasRiegoActivas == 1 && !riegoGeneral) {
                needOpenGeneral = true;
            }
        } finally {
            lock.unlock();
        }

        // üîß FUERA DEL LOCK: Solicitar recurso RMI y abrir v√°lvula general
        if (needOpenGeneral) {
            boolean recursoObtenido = false;
            
            try {
                if (rmiCliente != null) {
                    System.out.println("üîÑ Solicitando recurso RMI para riego general...");
                    rmiCliente.solicitarRecurso();
                    recursoObtenido = true;
                    System.out.println("‚úÖ Recurso RMI obtenido");
                } else {
                    System.err.println("‚ùå RMI Cliente no configurado al iniciar riego general");
                }
            } catch (RemoteException rex) {
                System.err.println("‚ùå RMI no disponible al abrir general: " + rex.getMessage());
                recursoObtenido = false;
            } catch (InterruptedException ie) {
                Thread.currentThread().interrupt();
                System.err.println("‚ö†Ô∏è Interrumpido al solicitar recurso RMI para riego general");
                throw ie;
            }

            // üîß VOLVER AL LOCK: Actualizar estado y abrir v√°lvula
            lock.lock();
            try {
                if (recursoObtenido) {
                    riegoGeneral = true;
                    
                    // üéØ CR√çTICO: Abrir la v√°lvula general (EV2)
                    if (outGeneral != null) {
                        outGeneral.println("ON");
                        outGeneral.flush();
                        
                        if (outGeneral.checkError()) {
                            System.err.println("‚ùå Error al enviar ON a v√°lvula general");
                        } else {
                            System.out.println("üíß Electrov√°lvula2 ABIERTA (riego general)");
                        }
                    } else {
                        System.err.println("‚ö†Ô∏è outGeneral es NULL - V√°lvula no conectada");
                    }
                    
                    // Actualizar impresor
                    if (imp != null) {
                        imp.setRiegoGeneral(riegoGeneral);
                    }
                } else {
                    // No pudimos obtener el recurso, revertir
                    valvulasRiegoActivas--;
                    System.err.println("‚ùå No se pudo abrir electrov√°lvula general: revertido estado.");
                    System.err.println("üìä V√°lvulas activas revertidas a: " + valvulasRiegoActivas);
                    
                    if (valvulasRiegoActivas == 0) {
                        puedeFertirregar.signalAll();
                    }
                }
            } finally {
                lock.unlock();
            }
        }
    }

    // Comunicaci√≥n v√°lvula general
    public void setElectrovalvulaGeneral(Socket cliente) {
        lock.lock();
        try {
            this.outGeneral = new PrintWriter(cliente.getOutputStream(), true);
            System.out.println("‚úÖ PrintWriter para Electrov√°lvula General (EV2) configurado");
        } catch (IOException e) {
            System.err.println("‚ùå Error al obtener outputStream de electrov√°lvula general: " + e.getMessage());
        } finally {
            lock.unlock();
        }
    }

    // Comunicaci√≥n V√°lvula Ferti
    public void setElectroValvulaFerti(Socket cliente) {
        lock.lock();
        try {
            this.outferti = new PrintWriter(cliente.getOutputStream(), true);
            System.out.println("‚úÖ PrintWriter para Electrov√°lvula Ferti (EV1) configurado");
        } catch (IOException ex) {
            System.err.println("‚ùå Error al configurar v√°lvula ferti: " + ex.getMessage());
            Logger.getLogger(CoordinadorBomba.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            lock.unlock();
        }
    }

    // Termina el riego
    public void terminarRiego(int parcela) {
        boolean needCloseGeneral = false;

        lock.lock();
        try {
            valvulasRiegoActivas--;
            if (valvulasRiegoActivas < 0) valvulasRiegoActivas = 0;
            
            System.out.println("üõë La parcela " + parcela + " termin√≥ el riego");
            System.out.println("üìä " + valvulasRiegoActivas + " v√°lvula(s) de riego activas");

            // Si ya no hay v√°lvulas activas, cerrar la general
            if (valvulasRiegoActivas == 0 && riegoGeneral) {
                needCloseGeneral = true;
            }
        } finally {
            lock.unlock();
        }

        // üîß FUERA DEL LOCK: Devolver recurso RMI
        if (needCloseGeneral) {
            try {
                if (rmiCliente != null) {
                    System.out.println("üîÑ Devolviendo recurso RMI...");
                    rmiCliente.devolverRecurso();
                    System.out.println("‚úÖ Recurso RMI devuelto");
                } else {
                    System.err.println("‚ùå RMI Cliente no configurado al cerrar riego general");
                }
            } catch (RemoteException rex) {
                System.err.println("‚ùå Error RMI al devolver recurso: " + rex.getMessage());
            } catch (InterruptedException ie) {
                Thread.currentThread().interrupt();
                System.err.println("‚ö†Ô∏è Interrumpido al devolver recurso RMI para riego general");
            }

            // üîß VOLVER AL LOCK: Cerrar v√°lvula y actualizar estado
            lock.lock();
            try {
                riegoGeneral = false;
                
                // üéØ CR√çTICO: Cerrar la v√°lvula general (EV2)
                if (outGeneral != null) {
                    outGeneral.println("OFF");
                    outGeneral.flush();
                    
                    if (outGeneral.checkError()) {
                        System.err.println("‚ùå Error al enviar OFF a v√°lvula general");
                    } else {
                        System.out.println("üíß Electrov√°lvula2 CERRADA");
                    }
                } else {
                    System.err.println("‚ö†Ô∏è outGeneral es NULL al cerrar");
                }
                
                // Actualizar impresor
                if (imp != null) {
                    imp.setRiegoGeneral(riegoGeneral);
                }
                
                // Notifica que se puede iniciar fertirrigaci√≥n
                puedeFertirregar.signalAll();
            } finally {
                lock.unlock();
            }
        }
    }

    // Inicia fertirrigaci√≥n
    public void iniciarFertirrigacion() throws InterruptedException {
        lock.lock();
        try {
            // Esperar mientras haya riego activo
            while (valvulasRiegoActivas > 0 || riegoGeneral) {
                System.out.println("‚è≥ Fertirrigaci√≥n en espera (riego activo)...");
                puedeFertirregar.await();
            }
        } finally {
            lock.unlock();
        }

        // üîß FUERA DEL LOCK: Solicitar recurso RMI
        boolean recursoObtenido = false;
        try {
            if (rmiCliente != null) {
                System.out.println("üîÑ Solicitando recurso RMI para fertirrigaci√≥n...");
                rmiCliente.solicitarRecurso();
                recursoObtenido = true;
                System.out.println("‚úÖ Recurso RMI obtenido para fertirrigaci√≥n");
            } else {
                System.err.println("‚ùå RMI no configurado para fertirrigaci√≥n");
            }
        } catch (RemoteException ex) {
            System.err.println("‚ùå Error RMI al solicitar recurso para fertirrigaci√≥n: " + ex.getMessage());
        } catch (InterruptedException ie) {
            Thread.currentThread().interrupt();
            throw ie;
        }

        // üîß VOLVER AL LOCK: Abrir v√°lvula ferti
        if (recursoObtenido) {
            lock.lock();
            try {
                fertirrigando = true;
                
                // üéØ CR√çTICO: Abrir la v√°lvula de fertirrigaci√≥n (EV1)
                if (outferti != null) {
                    outferti.println("ON");
                    outferti.flush();
                    
                    if (outferti.checkError()) {
                        System.err.println("‚ùå Error al enviar ON a v√°lvula ferti");
                    } else {
                        System.out.println("üåø Electrov√°lvula1 ABIERTA (fertirrigaci√≥n)");
                    }
                } else {
                    System.err.println("‚ö†Ô∏è outferti es NULL - V√°lvula no conectada");
                }
                
                // Actualizar impresor
                if (imp != null) {
                    imp.setFertirrigacion(fertirrigando);
                    imp.setTiempos(1, 0);
                    imp.setTiempos(2, 0);
                    imp.setTiempos(3, 0);
                    imp.setTiempos(4, 0);
                    imp.setTiempos(5, 0);
                }
            } finally {
                lock.unlock();
            }
        } else {
            System.err.println("‚ùå No se pudo iniciar fertirrigaci√≥n por fallo RMI.");
        }
    }

    // Termina fertirrigaci√≥n
    public void terminaFertirrigacion() {
        // üîß FUERA DEL LOCK: Devolver recurso RMI
        try {
            if (rmiCliente != null) {
                System.out.println("üîÑ Devolviendo recurso RMI de fertirrigaci√≥n...");
                rmiCliente.devolverRecurso();
                System.out.println("‚úÖ Recurso RMI devuelto");
            } else {
                System.err.println("‚ùå RMI no configurado al terminar fertirrigacion");
            }
        } catch (RemoteException rex) {
            System.err.println("‚ùå Error RMI al devolver recurso: " + rex.getMessage());
        } catch (InterruptedException ie) {
            Thread.currentThread().interrupt();
            System.err.println("‚ö†Ô∏è Interrumpido al devolver recurso de fertirrigacion");
        }

        // üîß VOLVER AL LOCK: Cerrar v√°lvula
        lock.lock();
        try {
            fertirrigando = false;
            
            // üéØ CR√çTICO: Cerrar la v√°lvula de fertirrigaci√≥n (EV1)
            if (outferti != null) {
                outferti.println("OFF");
                outferti.flush();
                
                if (outferti.checkError()) {
                    System.err.println("‚ùåError al enviar OFF a v√°lvula ferti");
                } else {
                    System.out.println("üåø Electrov√°lvula1 CERRADA");
                }
            } else {
                System.err.println("‚ö†Ô∏è outferti es NULL al cerrar");
            }
            
            // Actualizar impresor
            if (imp != null) {
                imp.setFertirrigacion(fertirrigando);
            }
            
            System.out.println("‚úÖ Fertirrigaci√≥n terminada");
            
            // Notificar que se puede iniciar riego
            puedeRegar.signalAll();
        } finally {
            lock.unlock();
        }
    }
    
    public void notificarDesconexionValvulaGeneral() throws InterruptedException {
        lock.lock();
        try {
            System.out.println("‚ö†Ô∏è CoordinadorBomba: V√°lvula general desconectada, cerrando PrintWriter");
            if (outGeneral != null) {
                try {
                    outGeneral.close();
                } catch (Exception e) {
                    // Ignorar errores al cerrar
                }
                outGeneral = null;
            }
            
            // Si hab√≠a riego general activo, terminar por seguridad
            if (riegoGeneral) {
                System.out.println("‚ö†Ô∏è Cerrando riego general por desconexi√≥n de v√°lvula");
                riegoGeneral = false;
                valvulasRiegoActivas = 0; // Resetear contador
                
                if (imp != null) {
                    imp.setRiegoGeneral(false);
                }
                
                puedeFertirregar.signalAll();
            }
        } finally {
            lock.unlock();
        }
        
        // Devolver recurso RMI fuera del lock
        if (riegoGeneral) {
            try {
                if (rmiCliente != null) {
                    rmiCliente.devolverRecurso();
                }
            } catch (RemoteException e) {
                System.err.println("Error al devolver recurso RMI: " + e.getMessage());
            }
        }
    }
    
    public void notificarDesconexionValvulaFerti() throws InterruptedException {
        lock.lock();
        try {
            System.out.println("‚ö†Ô∏è CoordinadorBomba: V√°lvula ferti desconectada, cerrando PrintWriter");
            if (outferti != null) {
                try {
                    outferti.close();
                } catch (Exception e) {
                    // Ignorar errores al cerrar
                }
                outferti = null;
            }
            
            // Si estaba fertirrigando, terminar por seguridad
            if (fertirrigando) {
                System.out.println("‚ö†Ô∏è Terminando fertirrigaci√≥n por desconexi√≥n de v√°lvula");
                fertirrigando = false;
                
                if (imp != null) {
                    imp.setFertirrigacion(false);
                }
                
                puedeRegar.signalAll();
            }
        } finally {
            lock.unlock();
        }
        
        // Devolver recurso RMI fuera del lock
        if (fertirrigando) {
            try {
                if (rmiCliente != null) {
                    rmiCliente.devolverRecurso();
                }
            } catch (RemoteException e) {
                System.err.println("Error al devolver recurso RMI: " + e.getMessage());
            }
        }
    }
}